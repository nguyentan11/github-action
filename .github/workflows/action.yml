name: terraform-deploy
run-name: ${{ github.actor }} is deploying terraform infrastructure
on:
  push:
    branches: [ test ] 
  workflow_dispatch:
jobs:
  terraform-test:
    name: Deploy TF
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: nguyentan11/github-action
        ref: 'test' 
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies Including Ansible
      run: |
        npm install ansible
        ansible --version
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: nguyentan11/fsoft-lab1
        ref: 'test'
    - name: Specific terraform version
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.9
        terraform_wrapper: false
    - name: Initial TF
      run: terraform init
    - name: Plan tf
      run: terraform plan -lock=false -input=false
    - name: Apply tf
      run: terraform apply -auto-approve -lock=false -input=false
    - name: Create Ansible inventory
      run: |
        ansible-config dump
        ls -al /home/runner/.ansible/tmp
        linux_private_key_pem=$(terraform output linux_private_key_pem)
        echo $linux_private_key_pem > li-private-key.pem
        cat li-private-key.pem
        sudo echo [linux] > hosts
        tempip=$(terraform output linux_private_ip)
        echo $tempip li-private-key.pem > tmp
        sudo cat tmp | sed 's/"//g' >> hosts
        cat hosts
    - name: destroy tf
      run: terraform destroy -auto-approve -lock=false

